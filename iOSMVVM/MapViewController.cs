// This file has been autogenerated from a class added in the UI designer.

using System;
using CommunityToolkit.Mvvm.DependencyInjection;
using CoreGraphics;
using CoreLocation;
using Foundation;
using Google.Maps;
using MapKit;
using SharedCode.Models;
using SharedCode.ViewModels;
using UIKit;
using GlobalToast;

namespace iOSMVVM
{
	public partial class MapViewController : UIViewController
	{
        private MapView map;
        public ListResponse selected;
        private CityWeatherViewModel viewModel;

        public MapViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            viewModel = Ioc.Default.GetRequiredService<CityWeatherViewModel>();
            if (selected != null)
                viewModel.setData(selected);

            SetupGoogleMaps();
        }

        private void SetupGoogleMaps()
        {
            var camera = CameraPosition.FromCamera(latitude: viewModel.WeatherResponse.Coord.Lat, longitude: viewModel.WeatherResponse.Coord.Lon, zoom: 18);
            map = MapView.FromCamera(CGRect.Empty, camera);
            map.MyLocationEnabled = true;
            map.MapType = MapViewType.Normal;
            map.UserInteractionEnabled = true;
            map.CoordinateLongPressed += TapHandle;

            var circleCenter = new CLLocationCoordinate2D(viewModel.WeatherResponse.Coord.Lat, viewModel.WeatherResponse.Coord.Lon);
            Marker marker = Marker.FromPosition(circleCenter);
            marker.Title = viewModel.WeatherResponse.Name;
            marker.Map = map;
            map.TappedMarker = (map1, marker1) => {
                Toast.MakeToast("Marker Name: " + marker1.Title).Show();
                return true;
            };

            View = map;
        }

        private void TapHandle(object sender, GMSCoordEventArgs e)
        {
            var circleCenter = new CLLocationCoordinate2D(e.Coordinate.Latitude, e.Coordinate.Longitude);
            Marker marker = Marker.FromPosition(circleCenter);

            marker.Title = "New Marker";
            marker.Map = map;
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }
    }
}
